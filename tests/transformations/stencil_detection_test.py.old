import dace
import numpy as np


N = dace.symbol('N', dace.int32)


@dace.program
def jacobi_1d(TSTEPS: dace.int32, A: dace.float64[1000], B: dace.float64[1000]):   
    for t in range(1, TSTEPS):
        B[1:-1] = 0.33333 * (A[:-2] + A[1:-1] + A[2:])
        # A[1:-1] = 0.33333 * (B[:-2] + B[1:-1] + B[2:])


def test_jacobi_1d():
    # N = 1000
    # A = np.fromfunction(lambda i: (i + 2) / N, shape=(N,), dtype=np.float64)
    # B = np.fromfunction(lambda i: (i + 3) / N, shape=(N,), dtype=np.float64)

    from dace.transformation.dataflow import MapFusion, StencilDetection
    
    sdfg = jacobi_1d.to_sdfg(strict=True)
    sdfg.apply_transformations_repeated(MapFusion)
    sdfg.save('postmapfusion.sdfg')
    sdfg.apply_transformations(StencilDetection)
    sdfg.save('preexpansion.sdfg')
    sdfg.apply_fpga_transformations()
    sdfg.expand_library_nodes()
    sdfg.save('postexpansion.sdfg')
    sdfg.compile()


if __name__ == '__main__':
    test_jacobi_1d()
